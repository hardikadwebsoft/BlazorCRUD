@using BlazorApp.Models.Models;
@using BlazorApp.Models.ViewModels
@using BlazorApp.Models.Helpers;
@using BlazorApp.Service;
@using BlazorApp.Service.Repository;
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationManager
@inject IRefreshService RefreshService
@inject HttpClient _client



@if (View == "Create")
{
    <h3>Create Employee :</h3>
}

@if (View == "Update")
{
    <h3>Update Employee :</h3>
}
@if (View == "Delete")
{
    <h3>Delete Employee :</h3>
}

<EditForm Model="EmployeeViewModel"  OnValidSubmit="HandleSubmit" >
    <DataAnnotationsValidator/>
    @if (View == "Create" || View == "Update")
    {
        <div class="col-md-6 ">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="EmployeeViewModel.Name" class="form-control"></InputText>
             <ValidationMessage For="@(()=>EmployeeViewModel.Name)" />
        </div>
        <div class="col-md-6 ">
            <label for="developer">Email</label>
            <InputText id="developer" @bind-Value="EmployeeViewModel.Email" class="form-control"></InputText>
            <ValidationMessage For="@(()=>EmployeeViewModel.Email)" />
        </div>
        <div class="col-md-6 ">
            <label for="dateofbirth">Date Of Birth</label>
            <InputDate id="dateofbirth" placeholder="dd MM yyyy" @bind-Value="dateTime" class="form-control" ></InputDate>
            <ValidationMessage For="@(()=>EmployeeViewModel.DateOfBirth)" />
        </div>
        <div class="col-md-6 ">
            <label for="department">Department</label>
           <InputSelect id="department" @bind-Value="EmployeeViewModel.Department" class="form-control form-select">
                @foreach (var department in Departments)
                {
                    <option value="@department.Name">@department.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(()=>EmployeeViewModel.Department)" />
        </div>
        
        <br />
        <div class="col-md-6 ">
            <button type="submit" class="btn btn-primary">@btnText</button>
            <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>

        </div>


    }

    @if (View == "Delete")
    {

        <div  class="col-md-6 ">
            <span class="text-black"> Are you sure to delete record of employee @EmployeeViewModel.Name ? </span>
        </div>
        <br />
        <div  class="col-md-6 ">
            <button type="button" class="btn btn-danger" @onclick="DeleteEmployee">Delete</button>
            <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
        </div>
    }



</EditForm>


@code {
    [Parameter]
    public EmployeeViewModel EmployeeViewModel { get; set; } = new();

    [Parameter]
    public bool IsAddSection { get; set; } = false;

    [Parameter]
    public string View { get; set; }

    private string btnText = string.Empty;

    private List<DepartmentViewModel> Departments = new List<DepartmentViewModel>();

    [Required(ErrorMessage = "BirthDate is required")]
    private DateTime dateTime = DateTime.Now;

    protected override void OnInitialized()
    {
        btnText = IsAddSection ? "Save" : "Update";

        if (!IsAddSection)
            dateTime =Convert.ToDateTime(EmployeeViewModel.DateOfBirth);

        Departments = new List<DepartmentViewModel>
        {
            new DepartmentViewModel(1, "Development"),
            new DepartmentViewModel(2, "Testing"),
            new DepartmentViewModel(3, "Marketing"),
            new DepartmentViewModel(4, "Sales"),
            new DepartmentViewModel(5, "Support"),
            new DepartmentViewModel(6, "IT"),
        };
    }

    async Task HandleSubmit()
    {
        EmployeeViewModel.DateOfBirth = dateTime.ToString("dd MMM yyyy");
        if (IsAddSection)
        {            
            await _client.PostAsJsonAsync<EmployeeViewModel>(Environment.GetEnvironmentVariable("ApiURL") + ServiceConstant.CreateEmployee , EmployeeViewModel);
        }
        else
        {
            await _client.PutAsJsonAsync<EmployeeViewModel>(Environment.GetEnvironmentVariable("ApiURL") + ServiceConstant.UpdateEmployee, EmployeeViewModel);
        }
        RefreshService.CallRequestRefresh();
    }
   

    async Task DeleteEmployee()
    {
        await _client.DeleteAsync(Environment.GetEnvironmentVariable("ApiURL") +ServiceConstant.DeleteEmployee + EmployeeViewModel.Id);
        RefreshService.CallRequestRefresh();
    }

    async Task Cancel()
    {
        RefreshService.CallRequestRefresh();
    }
}
